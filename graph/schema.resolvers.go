package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"
	todosQuery "github.com/chienaeae/gql-todo/internal/todos/query"
	"strconv"

	"github.com/chienaeae/gql-todo/graph/model"
	"github.com/chienaeae/gql-todo/internal/auth"
	"github.com/chienaeae/gql-todo/internal/links"
	"github.com/chienaeae/gql-todo/internal/pkg/jwt"
	"github.com/chienaeae/gql-todo/internal/tags"
	"github.com/chienaeae/gql-todo/internal/todos"
	"github.com/chienaeae/gql-todo/internal/users"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Link{}, fmt.Errorf("access denied")
	}

	var link links.Link
	link.Title = input.Title
	link.Address = input.Address
	link.User = user
	linkID := link.Save()
	graphqlUser := &model.User{
		ID:   link.User.ID,
		Name: link.User.Username,
	}

	return &model.Link{
		ID:      strconv.FormatInt(linkID, 10),
		Title:   link.Title,
		Address: link.Address,
		User:    graphqlUser,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	user.Create()
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Todo{}, fmt.Errorf("access denied")
	}
	var todo todos.Todo
	todo.Title = input.Title
	todo.Description = *input.Description
	todo.User = user
	todoID := todo.Save()
	graphqlUser := model.User{
		ID:   user.ID,
		Name: user.Username,
	}
	return &model.Todo{
		ID:          strconv.FormatInt(todoID, 10),
		Title:       todo.Title,
		Description: todo.Description,
		User:        &graphqlUser,
	}, nil
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.NewTag) (*model.Tag, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Tag{}, fmt.Errorf("access denied")
	}
	var tag tags.Tag
	tag.Name = input.Name
	tag.Description = *input.Description
	tagID := tag.Save()
	return &model.Tag{
		ID:          strconv.FormatInt(tagID, 10),
		Name:        tag.Name,
		Description: tag.Description,
	}, nil
}

// LinkTagToTodo is the resolver for the linkTagToTodo field.
func (r *mutationResolver) LinkTagToTodo(ctx context.Context, input model.LinkTagToTodoPayload) (*model.Todo, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Todo{}, fmt.Errorf("access denied")
	}
	todo, err := todos.GetById(input.TodoID)
	if err != nil {
		return &model.Todo{}, err
	}
	err = todo.LinkTag(input.TagID)
	if err != nil {
		return &model.Todo{}, err
	}
	graphqlUser := &model.User{
		ID:   todo.User.ID,
		Name: todo.User.Username,
	}
	return &model.Todo{
		ID:          todo.ID,
		Title:       todo.Title,
		Description: todo.Description,
		User:        graphqlUser,
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	correct := user.Authenticate()
	if !correct {
		return "", &users.WrongUsernameOrPasswordError{}
	}
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", fmt.Errorf("access denied")
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	var resultLinks []*model.Link
	var dbLinks []links.Link
	dbLinks = links.GetAll()
	for _, link := range dbLinks {
		graphqlUser := &model.User{
			ID:   link.User.ID,
			Name: link.User.Username,
		}
		resultLinks = append(resultLinks, &model.Link{
			ID:      link.ID,
			Title:   link.Title,
			Address: link.Address,
			User:    graphqlUser,
		})
	}
	return resultLinks, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	var resultTodos []*model.Todo
	dbTodos := todos.GetAll()
	for _, todo := range dbTodos {
		graphqlUser := &model.User{
			ID:   todo.User.ID,
			Name: todo.User.Username,
		}
		resultTodos = append(resultTodos, &model.Todo{
			ID:          todo.ID,
			Title:       todo.Title,
			Description: todo.Description,
			User:        graphqlUser,
		})
	}

	return resultTodos, nil
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*model.Tag, error) {
	var resultTags []*model.Tag
	dbTags := tags.GetAll()
	for _, tag := range dbTags {
		resultTags = append(resultTags, &model.Tag{
			ID:          tag.ID,
			Name:        tag.Name,
			Description: tag.Description,
		})
	}
	return resultTags, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, name string) (*model.User, error) {
	id, err := users.GetUserIdByUsername(name)
	if err != nil {
		return &model.User{}, fmt.Errorf("cannot find the user")
	}
	userProfile := users.UserProfile{
		ID:       strconv.Itoa(id),
		Username: name,
	}
	user := model.User{
		ID:   userProfile.ID,
		Name: userProfile.Username,
	}
	return &user, nil
}

// TodosConnection is the resolver for the todosConnection field.
func (r *userResolver) TodosConnection(ctx context.Context, obj *model.User, first *int, after *string) (*model.UserTodosConnection, error) {
	userTodos := todos.GetManyByUserID(obj.ID, &todosQuery.LimitOption{
		AfterTodoID: after, Limit: first,
	})
	var userTodosConnection model.UserTodosConnection
	userTodosConnection.Edges = make([]*model.UserTodosEdge, len(userTodos))
	for index, todo := range userTodos {
		userTodosConnection.Edges[index] = &model.UserTodosEdge{
			Node: &model.Todo{
				ID:          todo.ID,
				Title:       todo.Title,
				Description: todo.Description,
				User: &model.User{
					ID:   todo.User.ID,
					Name: todo.User.Username,
				},
			},
		}
	}
	return &userTodosConnection, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
